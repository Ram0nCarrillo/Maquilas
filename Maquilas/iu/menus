"""
Interfaz gráfica para el sistema de gestión de maquilas usando Tkinter.
Incluye funcionalidades para manejar áreas, operadores y supervisores.
Cada pestaña permite realizar operaciones CRUD (Crear, Leer, Actualizar, Eliminar).
"""

import tkinter as tk
from tkinter import ttk, messagebox
from datetime import datetime
from entities.area import Area
from entities.operador import Operador
from entities.supervisor import Supervisor
from persistence.db import SessionLocal

# Crear una instancia de sesión para interactuar con la base de datos
session = SessionLocal()

# Funciones para consultar datos de la base

def listar_areas():
    return session.query(Area).all()

def listar_supervisores():
    return session.query(Supervisor).all()

def listar_operadores():
    return session.query(Operador).all()

class App(tk.Tk):
    """Clase principal que contiene la aplicación Tkinter."""
    def __init__(self):
        super().__init__()
        self.title("Sistema de Gestión de Maquilas")
        self.geometry("1000x700")
        self.config(bg="#f0f0f0")

        # Crear tabs para cada entidad
        self.notebook = ttk.Notebook(self)
        self.notebook.pack(fill='both', expand=True)

        self.create_area_tab()
        self.create_operador_tab()
        self.create_supervisor_tab()

    # ------------------------ TAB ÁREAS ------------------------
    def create_area_tab(self):
        """Crea la pestaña para gestionar las áreas."""
        area_frame = ttk.Frame(self.notebook)
        self.notebook.add(area_frame, text="Áreas")

        # Tabla de áreas
        self.area_tree = ttk.Treeview(area_frame, columns=("ID", "Departamento", "Descripción"), show='headings')
        for col in self.area_tree["columns"]:
            self.area_tree.heading(col, text=col)
        self.area_tree.pack(fill='both', expand=True)

        ttk.Button(area_frame, text="Actualizar", command=self.load_areas).pack()

        # Formulario de entrada
        entry_frame = ttk.Frame(area_frame)
        entry_frame.pack(pady=10)

        ttk.Label(entry_frame, text="Departamento").grid(row=0, column=0)
        self.dep_entry = ttk.Entry(entry_frame)
        self.dep_entry.grid(row=0, column=1)

        ttk.Label(entry_frame, text="Descripción").grid(row=1, column=0)
        self.desc_entry = ttk.Entry(entry_frame)
        self.desc_entry.grid(row=1, column=1)

        # Botones
        ttk.Button(entry_frame, text="Agregar Área", command=self.add_area).grid(row=2, columnspan=2, pady=5)
        ttk.Button(entry_frame, text="Eliminar Área Seleccionada", command=self.delete_area).grid(row=3, columnspan=2, pady=5)

        self.load_areas()

    def load_areas(self):
        """Carga las áreas desde la base de datos y actualiza la tabla."""
        for row in self.area_tree.get_children():
            self.area_tree.delete(row)
        for area in listar_areas():
            self.area_tree.insert('', 'end', values=(area.id, area.departamento, area.descripcion))

    def add_area(self):
        """Agrega una nueva área a la base de datos."""
        departamento = self.dep_entry.get()
        descripcion = self.desc_entry.get()
        if departamento and descripcion:
            nueva = Area(departamento=departamento, descripcion=descripcion)
            session.add(nueva)
            session.commit()
            self.load_areas()
            self.dep_entry.delete(0, 'end')
            self.desc_entry.delete(0, 'end')
        else:
            messagebox.showwarning("Campos incompletos", "Debes llenar todos los campos")

    def delete_area(self):
        """Elimina el área seleccionada en la tabla."""
        selected = self.area_tree.focus()
        if not selected:
            messagebox.showinfo("Seleccionar", "Selecciona un área a eliminar")
            return
        item = self.area_tree.item(selected)
        area_id = item['values'][0]
        area = session.query(Area).filter_by(id=area_id).first()
        if area:
            session.delete(area)
            session.commit()
            self.load_areas()

    # ------------------------ TAB OPERADORES ------------------------
    def create_operador_tab(self):
        """Crea la pestaña para gestionar operadores."""
        operador_frame = ttk.Frame(self.notebook)
        self.notebook.add(operador_frame, text="Operadores")

        # Tabla de operadores
        self.operador_tree = ttk.Treeview(operador_frame, columns=("ID", "Nombre", "Sexo", "Fecha Ingreso", "Turno", "Salario", "Área", "Supervisor"), show='headings')
        for col in self.operador_tree["columns"]:
            self.operador_tree.heading(col, text=col)
        self.operador_tree.pack(fill='both', expand=True)

        ttk.Button(operador_frame, text="Actualizar", command=self.load_operadores).pack()

        # Formulario de entrada
        entry_frame = ttk.Frame(operador_frame)
        entry_frame.pack(pady=10)

        labels = ["Nombre", "Sexo", "Fecha Ingreso (YYYY-MM-DD)", "Turno", "Salario", "Área ID", "Supervisor ID"]
        self.operador_entries = []
        for i, label in enumerate(labels):
            ttk.Label(entry_frame, text=label).grid(row=i, column=0)
            entry = ttk.Entry(entry_frame)
            entry.grid(row=i, column=1)
            self.operador_entries.append(entry)

        # Botones
        ttk.Button(entry_frame, text="Agregar Operador", command=self.add_operador).grid(row=len(labels), columnspan=2, pady=5)
        ttk.Button(entry_frame, text="Eliminar Operador Seleccionado", command=self.delete_operador).grid(row=len(labels)+1, columnspan=2, pady=5)

        self.load_operadores()

    def load_operadores(self):
        """Carga los operadores y actualiza la tabla."""
        for row in self.operador_tree.get_children():
            self.operador_tree.delete(row)
        for o in listar_operadores():
            area = o.area.departamento if o.area else "Sin área"
            supervisor = o.supervisor.nombre if o.supervisor else "Sin supervisor"
            self.operador_tree.insert('', 'end', values=(o.id, o.nombre, o.sexo, o.fecha_ingreso, o.turno, o.salario, area, supervisor))

    def add_operador(self):
        """Agrega un nuevo operador a la base de datos."""
        try:
            nombre = self.operador_entries[0].get()
            sexo = self.operador_entries[1].get()
            fecha = datetime.strptime(self.operador_entries[2].get(), "%Y-%m-%d").date()
            turno = self.operador_entries[3].get()
            salario = float(self.operador_entries[4].get())
            id_area = int(self.operador_entries[5].get())
            id_supervisor = int(self.operador_entries[6].get())

            nuevo = Operador(nombre=nombre, sexo=sexo, fecha_ingreso=fecha, turno=turno, salario=salario, id_area=id_area, id_supervisor=id_supervisor)
            session.add(nuevo)
            session.commit()
            self.load_operadores()
            for entry in self.operador_entries:
                entry.delete(0, 'end')
        except Exception as e:
            messagebox.showerror("Error", str(e))

    def delete_operador(self):
        """Elimina el operador seleccionado."""
        selected = self.operador_tree.focus()
        if not selected:
            messagebox.showinfo("Seleccionar", "Selecciona un operador a eliminar")
            return
        item = self.operador_tree.item(selected)
        operador_id = item['values'][0]
        operador = session.query(Operador).filter_by(id=operador_id).first()
        if operador:
            session.delete(operador)
            session.commit()
            self.load_operadores()

    # ------------------------ TAB SUPERVISORES ------------------------
    def create_supervisor_tab(self):
        """Crea la pestaña para gestionar supervisores."""
        supervisor_frame = ttk.Frame(self.notebook)
        self.notebook.add(supervisor_frame, text="Supervisores")

        # Tabla de supervisores
        self.supervisor_tree = ttk.Treeview(supervisor_frame, columns=("ID", "Nombre"), show='headings')
        for col in self.supervisor_tree["columns"]:
            self.supervisor_tree.heading(col, text=col)
        self.supervisor_tree.pack(fill='both', expand=True)

        ttk.Button(supervisor_frame, text="Actualizar", command=self.load_supervisores).pack()

        # Formulario de entrada
        entry_frame = ttk.Frame(supervisor_frame)
        entry_frame.pack(pady=10)

        ttk.Label(entry_frame, text="Nombre").grid(row=0, column=0)
        self.supervisor_entry = ttk.Entry(entry_frame)
        self.supervisor_entry.grid(row=0, column=1)

        ttk.Button(entry_frame, text="Agregar Supervisor", command=self.add_supervisor).grid(row=1, columnspan=2, pady=5)
        ttk.Button(entry_frame, text="Eliminar Supervisor Seleccionado", command=self.delete_supervisor).grid(row=2, columnspan=2, pady=5)

        self.load_supervisores()

    def load_supervisores(self):
        """Carga los supervisores en la tabla."""
        for row in self.supervisor_tree.get_children():
            self.supervisor_tree.delete(row)
        for s in listar_supervisores():
            self.supervisor_tree.insert('', 'end', values=(s.id, s.nombre))

    def add_supervisor(self):
        """Agrega un nuevo supervisor a la base de datos."""
        nombre = self.supervisor_entry.get()
        if nombre:
            nuevo = Supervisor(nombre=nombre)
            session.add(nuevo)
            session.commit()
            self.load_supervisores()
            self.supervisor_entry.delete(0, 'end')
        else:
            messagebox.showwarning("Campo vacío", "Debes escribir un nombre")

    def delete_supervisor(self):
        """Elimina el supervisor seleccionado."""
        selected = self.supervisor_tree.focus()
        if not selected:
            messagebox.showinfo("Seleccionar", "Selecciona un supervisor a eliminar")
            return
        item = self.supervisor_tree.item(selected)
        supervisor_id = item['values'][0]
        supervisor = session.query(Supervisor).filter_by(id=supervisor_id).first()
        if supervisor:
            session.delete(supervisor)
            session.commit()
            self.load_supervisores()

# Ejecutar la aplicación principal
if __name__ == "__main__":
    app = App()
    app.mainloop()
